    environment {
        // Declaration of environment variables
        DOCKER_ID = "esther237" // replace this with your docker-id
        DOCKER_IMAGE = "python"
        DOCKER_TAG = "v.${BUILD_ID}.0" // we will tag our images with the current build in order to increment the value by 1 with each new build
    }
    agent { label 'ContrÃ´leur' }// Jenkins will be able to select all available agents
    stages {
        stage('Docker Build') { // docker build image stage
            steps {
                script {
                    sh '''
                    docker rm -f jenkins
                    docker rmi $(docker images -q)
                    docker build -t $DOCKER_ID/$DOCKER_IMAGE:cast.$DOCKER_TAG  -f Dockerfile ./cast-service
                    docker build -t $DOCKER_ID/$DOCKER_IMAGE:movie.$DOCKER_TAG  -f Dockerfile ./movie-service
                    sleep 6
                    '''
                }
            }
        }
        stage('Docker run') { // run container from our builded image
            steps {
                script {
                    sh '''
                    docker run -d -p 8002:8000 --name jenkins-cast $DOCKER_ID/$DOCKER_IMAGE:cast.$DOCKER_TAG
                    docker run -d -p 8001:8000 --name jenkins-movie $DOCKER_ID/$DOCKER_IMAGE:movie.$DOCKER_TAG
                    sleep 10
                    '''
                }
            }
        }
        stage('Test Acceptance') { // we launch the curl command to validate that the container responds to the request
            steps {
                script {
                    sh '''
                    curl localhost
                    '''
                }
            }
        }
        stage('Docker Push') { // we pass the built image to our docker hub account
            environment {
                DOCKER_PASS = credentials("DOCKER_HUB_PASS") // we retrieve docker password from secret text called docker_hub_pass saved on jenkins
            }
            steps {
                script {
                sh '''
                docker login -u $DOCKER_ID -p $DOCKER_PASS
                docker push $DOCKER_ID/$DOCKER_IMAGE:cast.$DOCKER_TAG
                docker push $DOCKER_ID/$DOCKER_IMAGE:movie.$DOCKER_TAG
                '''
                }
            }
        }
        stage('Deployment in dev') {
            environment {
                KUBECONFIG = credentials("config") // we retrieve kubeconfig from secret file called config saved on jenkins
            }
            steps {
                script {
                    sh '''
                    rm -Rf .kube
                    mkdir .kube
                    ls
                    cat $KUBECONFIG > .kube/config
                    cp cast/values.yaml values.yml
                    cat values.yml
                    sed -i "s+tag.*+tag: cast.${DOCKER_TAG}+g" values.yml
                    helm upgrade --install app cast-service --values=values.yml --namespace dev
                    '''
                }
            }
        }
        stage('Deployment in dev') {
            environment {
                KUBECONFIG = credentials("config") // we retrieve kubeconfig from secret file called config saved on jenkins
            }
            steps {
                script {
                    sh '''
                    rm -Rf .kube
                    mkdir .kube
                    ls
                    cat $KUBECONFIG > .kube/config
                    cp movie/values.yaml values.yml
                    cat values.yml
                    sed -i "s+tag.*+tag: movie.${DOCKER_TAG}+g" values.yml
                    helm upgrade --install app movie-service --values=values.yml --namespace dev
                    '''
                }
            }
        }
        stage('Deployment in dev') {
            environment {
                KUBECONFIG = credentials("config") // we retrieve kubeconfig from secret file called config saved on jenkins
            }
            steps {
                script {
                    sh '''
                    rm -Rf .kube
                    mkdir .kube
                    ls
                    cat $KUBECONFIG > .kube/config
                    cp movie-db/values.yaml values.yml
                    cat values.yml
                    helm upgrade --install app movie-db --values=values.yml --namespace dev
                    '''
                }
            }
        }
        stage('Deployment in dev') {
            environment {
                KUBECONFIG = credentials("config") // we retrieve kubeconfig from secret file called config saved on jenkins
            }
            steps {
                script {
                    sh '''
                    rm -Rf .kube
                    mkdir .kube
                    ls
                    cat $KUBECONFIG > .kube/config
                    cp cast-db/values.yaml values.yml
                    cat values.yml
                    helm upgrade --install app cast-db --values=values.yml --namespace dev
                    '''
                }
            }
        }
        stage('Deployment in dev') {
            environment {
                KUBECONFIG = credentials("config") // we retrieve kubeconfig from secret file called config saved on jenkins
            }
            steps {
                script {
                    sh '''
                    rm -Rf .kube
                    mkdir .kube
                    ls
                    cat $KUBECONFIG > .kube/config
                    cp nginx/values.yaml values.yml
                    cat values.yml
                    helm upgrade --install app nginx --values=values.yml --namespace dev
                    '''
                }
            }
        }
        stage('Deployment in staging') {
            environment {
                KUBECONFIG = credentials("config") // we retrieve kubeconfig from secret file called config saved on jenkins
            }
            steps {
                script {
                    sh '''
                    rm -Rf .kube
                    mkdir .kube
                    ls
                    cat $KUBECONFIG > .kube/config
                    cp cast/values.yaml values.yml
                    cat values.yml
                    sed -i "s+tag.*+tag: cast.${DOCKER_TAG}+g" values.yml
                    helm upgrade --install app cast-service --values=values.yml --namespace staging
                    '''
                }
            }
        }
         stage('Deployment in staging') {
            environment {
                KUBECONFIG = credentials("config") // we retrieve kubeconfig from secret file called config saved on jenkins
            }
            steps {
                script {
                    sh '''
                    rm -Rf .kube
                    mkdir .kube
                    ls
                    cat $KUBECONFIG > .kube/config
                    cp movie/values.yaml values.yml
                    cat values.yml
                    sed -i "s+tag.*+tag: movie.${DOCKER_TAG}+g" values.yml
                    helm upgrade --install app movie-service --values=values.yml --namespace staging
                    '''
                }
            }
        }
         stage('Deployment in staging') {
            environment {
                KUBECONFIG = credentials("config") // we retrieve kubeconfig from secret file called config saved on jenkins
            }
            steps {
                script {
                    sh '''
                    rm -Rf .kube
                    mkdir .kube
                    ls
                    cat $KUBECONFIG > .kube/config
                    cp movie-db/values.yaml values.yml
                    cat values.yml
                    helm upgrade --install app movie-db --values=values.yml --namespace staging
                    '''
                }
            }
        }
         stage('Deployment in staging') {
            environment {
                KUBECONFIG = credentials("config") // we retrieve kubeconfig from secret file called config saved on jenkins
            }
            steps {
                script {
                    sh '''
                    rm -Rf .kube
                    mkdir .kube
                    ls
                    cat $KUBECONFIG > .kube/config
                    cp cast-db/values.yaml values.yml
                    cat values.yml
                    helm upgrade --install app cast-db --values=values.yml --namespace staging
                    '''
                }
            }
        }
        stage('Deployment in staging') {
            environment {
                KUBECONFIG = credentials("config") // we retrieve kubeconfig from secret file called config saved on jenkins
            }
            steps {
                script {
                    sh '''
                    rm -Rf .kube
                    mkdir .kube
                    ls
                    cat $KUBECONFIG > .kube/config
                    cp nginx/values.yaml values.yml
                    cat values.yml
                    helm upgrade --install app nginx --values=values.yml --namespace staging
                    '''
                }
            }
        }
        stage('Deployment in prod') {
            environment {
                KUBECONFIG = credentials("config") // we retrieve kubeconfig from secret file called config saved on jenkins
            }
            steps {
                // Create an Approval Button with a timeout of 15 minutes.
                // this requires manual validation in order to deploy on the production environment
                timeout(time: 15, unit: "MINUTES") {
                    input message: 'Do you want to deploy in production ?', ok: 'Yes'
                }
                script {
                    sh '''
                    rm -Rf .kube
                    mkdir .kube
                    ls
                    cat $KUBECONFIG > .kube/config
                    cp cast/values.yaml values.yml
                    cat values.yml
                    sed -i "s+tag.*+tag: cast.${DOCKER_TAG}+g" values.yml
                    helm upgrade --install app cast-service --values=values.yml --namespace prod
                    '''
                }
            }
        }
         stage('Deployment in prod') {
            environment {
                KUBECONFIG = credentials("config") // we retrieve kubeconfig from secret file called config saved on jenkins
            }
            steps {
                // Create an Approval Button with a timeout of 15 minutes.
                // this requires manual validation in order to deploy on the production environment
                timeout(time: 15, unit: "MINUTES") {
                    input message: 'Do you want to deploy in production ?', ok: 'Yes'
                }
                script {
                    sh '''
                    rm -Rf .kube
                    mkdir .kube
                    ls
                    cat $KUBECONFIG > .kube/config
                    cp movie/values.yaml values.yml
                    cat values.yml
                    sed -i "s+tag.*+tag: movie.${DOCKER_TAG}+g" values.yml
                    helm upgrade --install app movie-service --values=values.yml --namespace prod
                    '''
                }
            }
        }
         stage('Deployment in prod') {
            environment {
                KUBECONFIG = credentials("config") // we retrieve kubeconfig from secret file called config saved on jenkins
            }
            steps {
                // Create an Approval Button with a timeout of 15 minutes.
                // this requires manual validation in order to deploy on the production environment
                timeout(time: 15, unit: "MINUTES") {
                    input message: 'Do you want to deploy in production ?', ok: 'Yes'
                }
                script {
                    sh '''
                    rm -Rf .kube
                    mkdir .kube
                    ls
                    cat $KUBECONFIG > .kube/config
                    cp movie-db/values.yaml values.yml
                    cat values.yml
                    sed -i "s+tag.*+tag: movie-db.${DOCKER_TAG}+g" values.yml
                    helm upgrade --install app movie-db --values=values.yml --namespace prod
                    '''
                }
            }
        }
         stage('Deployment in prod') {
            environment {
                KUBECONFIG = credentials("config") // we retrieve kubeconfig from secret file called config saved on jenkins
            }
            steps {
                // Create an Approval Button with a timeout of 15 minutes.
                // this requires manual validation in order to deploy on the production environment
                timeout(time: 15, unit: "MINUTES") {
                    input message: 'Do you want to deploy in production ?', ok: 'Yes'
                }
                script {
                    sh '''
                    rm -Rf .kube
                    mkdir .kube
                    ls
                    cat $KUBECONFIG > .kube/config
                    cp cast-db/values.yaml values.yml
                    cat values.yml
                    helm upgrade --install app cast-db --values=values.yml --namespace prod
                    '''
                }
            }
        }
         stage('Deployment in prod') {
            environment {
                KUBECONFIG = credentials("config") // we retrieve kubeconfig from secret file called config saved on jenkins
            }
            steps {
                // Create an Approval Button with a timeout of 15 minutes.
                // this requires manual validation in order to deploy on the production environment
                timeout(time: 15, unit: "MINUTES") {
                    input message: 'Do you want to deploy in production ?', ok: 'Yes'
                }
                script {
                    sh '''
                    rm -Rf .kube
                    mkdir .kube
                    ls
                    cat $KUBECONFIG > .kube/config
                    cp nginx/values.yaml values.yml
                    cat values.yml
                    helm upgrade --install app nginx --values=values.yml --namespace prod
                    '''
            }
        }
    }
}
